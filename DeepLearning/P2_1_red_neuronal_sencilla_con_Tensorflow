{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"P2_1_red_neuronal_sencilla_con_Tensorflow","provenance":[{"file_id":"1ehETBOVtCqe7G6HOvm84hfXba8Gd9ILW","timestamp":1634313657766}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Y4tE18VT30ns"},"source":["#Descripcion:\n","\n","---\n","\n","\n","*   Crearemos un software con programación regular para conversión de grados (celsius a fahrenheit).\n","*   Crearemos una IA que permita convertir grados Celsius a Fharenheit (sin reglas ni logíca)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Xut9tpBV5ZTO"},"source":["#Conversión con Programación clasica/regular\n","\n","Donde el programador:\n","*  Crea las reglas \n","*  Crea la logica de como se aplican esas reglas.\n","\n","Ejemplo: software para convertir grados Celsius a Fahrenheit:\n","\n","Fah = Celsius * 1.8 + 32\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QXIqvGZ-XZOo","executionInfo":{"status":"ok","timestamp":1634330059737,"user_tz":300,"elapsed":213,"user":{"displayName":"Luis Fernando Castellanos Guarin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiNf725gjhpmPoePk2pKrbFIASNL2N1rVYLatwsNg=s64","userId":"08966922054785833228"}},"outputId":"66c7113b-9569-4cda-a062-5dd04a9cde5c"},"source":["#creamos una funcion para convertir\n","def f_conv_cels_fah (p_celsius):\n","  fah= p_celsius*1.8 + 32\n","  return fah\n","\n","print('50° Celsius= ',\n","      f_conv_cels_fah(50),\n","      '° Fahrenheit ')"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["50° Celsius=  122.0 ° Fahrenheit \n"]}]},{"cell_type":"markdown","metadata":{"id":"6JqC6_qAZLNO"},"source":["*  pero y si no conocemos las reglas?\n","*  y si no es la logica es muy compleja o peor es muy variable?\n"]},{"cell_type":"markdown","metadata":{"id":"RvXF3w8n5jTj"},"source":["#Conversión con IA \n","\n","*   Una red con una capa de entrada y una de salida\n","*   para que entrene le pasamos los grados celsius y su conversión fahrenheit \n","*   La red neuronal aprendera por si sola las reglas y la logíca con todas sus variaciones (pesos y sesgos).\n"]},{"cell_type":"markdown","metadata":{"id":"aUiXjnh3bE1w"},"source":["##P1. importando librerias."]},{"cell_type":"code","metadata":{"id":"Hy_pAhzDZ4gy","executionInfo":{"status":"ok","timestamp":1634330064107,"user_tz":300,"elapsed":2300,"user":{"displayName":"Luis Fernando Castellanos Guarin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiNf725gjhpmPoePk2pKrbFIASNL2N1rVYLatwsNg=s64","userId":"08966922054785833228"}}},"source":["import tensorflow as tf\n","import numpy as np"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uTT6OWezbK5D"},"source":["##P2. definiendo los parametros de entrada y salida (capas)"]},{"cell_type":"code","metadata":{"id":"MIrfX72vaL1z","executionInfo":{"status":"ok","timestamp":1634330065750,"user_tz":300,"elapsed":202,"user":{"displayName":"Luis Fernando Castellanos Guarin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiNf725gjhpmPoePk2pKrbFIASNL2N1rVYLatwsNg=s64","userId":"08966922054785833228"}}},"source":["celsius    = np.array([-40, -10,  0,  8, 15, 22, 38], dtype=float)   #parametros de entrada\n","fahrenheit = np.array([-40,  14, 32, 46, 59, 72, 100], dtype=float) #parametros de salida "],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZsvTtRx6bSpM"},"source":["##P3. creando la red neuronal\n","\n","---\n","\n","\n","\n","*   Usamos Keras como libreria de alto nivel (facilita mucho la creación de redes neuronales)\n","*   usaremos un modelo secuencial (una red simple), hay más modelos, ejemplo: CNN, LSTM/ RNN, GAN, BERT\n","*   crearemos 3 capas densas, que son aquellas que tiene conexiones con todas las neuronas de la siguiente capa, donde:\n","    *   Units= cantidad de neuronas\n","    *   input_shape= cantidad de nueronas de entrada    "]},{"cell_type":"code","metadata":{"id":"RIG6Y5jEafFL","executionInfo":{"status":"ok","timestamp":1634330068620,"user_tz":300,"elapsed":1074,"user":{"displayName":"Luis Fernando Castellanos Guarin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiNf725gjhpmPoePk2pKrbFIASNL2N1rVYLatwsNg=s64","userId":"08966922054785833228"}}},"source":["capa = tf.keras.layers.Dense(units=1, input_shape=[1])\n","modelo = tf.keras.Sequential([capa])\n"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HZoamnCWlfoR"},"source":["###P3.1 compilamos la red:\n","\n","\n","*   Usaremos el optimizador ADAM, hay otros más complejos como RELU, SOFTMAX...etc...es quien le dice a la red como ajustar los pesos y los sesgos (le dice como aprender y no desaprender)\n","*  definiremos una tasa de aprendizaje de 0.1 (entre más pequeño el número el ajuste es menor y más tiempo dura en aprender).\n","*   tomaremos la una función de calculo de perdida del aprendizaje llamada \"MEAN_SQUARED_ERROR- error cuadradico medio\", que es \"una poca cantidad de error grandes es PEOR que una gran cantidad de errores pequeños\" \n","\n"]},{"cell_type":"code","metadata":{"id":"1_WHzWidbN_8","executionInfo":{"status":"ok","timestamp":1634330083279,"user_tz":300,"elapsed":200,"user":{"displayName":"Luis Fernando Castellanos Guarin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiNf725gjhpmPoePk2pKrbFIASNL2N1rVYLatwsNg=s64","userId":"08966922054785833228"}}},"source":["modelo.compile(\n","    optimizer=tf.keras.optimizers.Adam(0.1),\n","    loss='mean_squared_error'\n",")"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Csmk2cjvpTNU"},"source":["##P4.entrenando"]},{"cell_type":"code","metadata":{"id":"4D-NuUTnbabR"},"source":["print(\"Comenzando entrenamiento...\")\n","historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose=True)\n","print(\"Modelo entrenado!\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9beXoLRapWWr"},"source":["###P4.1 resultados del entrenamiento"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"px43cF3Nb3mG","executionInfo":{"status":"ok","timestamp":1634330129762,"user_tz":300,"elapsed":519,"user":{"displayName":"Luis Fernando Castellanos Guarin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiNf725gjhpmPoePk2pKrbFIASNL2N1rVYLatwsNg=s64","userId":"08966922054785833228"}},"outputId":"426df933-4f32-4b2b-c436-76c4db312d3e"},"source":["import matplotlib.pyplot as plt\n","plt.xlabel(\"# Epoca\")\n","plt.ylabel(\"Magnitud de pérdida\")\n","plt.plot(historial.history[\"loss\"])"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fd76f320e90>]"]},"metadata":{},"execution_count":10},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"fDGrCHAOppi0"},"source":["###P5. hagamos una predicción"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"esVvhzjMcV9f","executionInfo":{"status":"ok","timestamp":1634330602632,"user_tz":300,"elapsed":190,"user":{"displayName":"Luis Fernando Castellanos Guarin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiNf725gjhpmPoePk2pKrbFIASNL2N1rVYLatwsNg=s64","userId":"08966922054785833228"}},"outputId":"6f9d9e90-530a-428e-e97a-7684871dd228"},"source":["v_celsius= 50\n","print(\"Hagamos una predicción!\")\n","resul_IA   = modelo.predict([v_celsius])\n","result_real= f_conv_cels_fah(v_celsius)\n","dif        = 100-(resul_IA*100/result_real)\n","print('Celsius= ',v_celsius, '° = Fahrenheit:',\n","      '\\nIA: ',resul_IA,\n","      '\\nRegular: ',result_real,\n","      '\\nDif %:',dif)\n"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Hagamos una predicción!\n","Celsius=  50 ° = Fahrenheit: \n","IA:  [[121.82711]] \n","Regular:  122.0 \n","Dif %: [[0.141716]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"tg8E_nqhp84e"},"source":["##P6. conociendo que sesgos y pesos resultantes\n","\n","\n","---\n","Una vez termina de entrenar las neuronas quedan con pesos y sesgos \n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FVDejrBgcokc","executionInfo":{"status":"ok","timestamp":1634330677001,"user_tz":300,"elapsed":203,"user":{"displayName":"Luis Fernando Castellanos Guarin","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiNf725gjhpmPoePk2pKrbFIASNL2N1rVYLatwsNg=s64","userId":"08966922054785833228"}},"outputId":"1fd12d87-f9fc-4912-c562-257de9a4fbea"},"source":["print(\"Variables internas del modelo\")\n","print('peso: ',capa.get_weights()[0])\n","print('sesgo: ',capa.get_weights()[1])\n","#print(oculta1.get_weights())\n","#print(oculta2.get_weights())\n","#print(salida.get_weights())"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Variables internas del modelo\n","peso:  [[1.7982949]]\n","sesgo:  [31.91237]\n"]}]},{"cell_type":"markdown","metadata":{"id":"cEkKfDZTs39E"},"source":["la red sin decirle las reglas ni la logica pudo ella sola generar un algorimo para calcular un valor aproximado del 99% de acertabilidad.\n","\n","fahr= cels *1.8 + 32\n","\n","y= mx + b  (regresión lineal)"]},{"cell_type":"markdown","metadata":{"id":"Agox1c8FtbAk"},"source":["##P7. y si le pongo más neuronas y más capas?"]},{"cell_type":"markdown","metadata":{"id":"wN8JIsBkv27t"},"source":["###P7.1 creamos un modelo con dos capas ocultas"]},{"cell_type":"code","metadata":{"id":"XY_FEiAchGCY"},"source":["oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])  # capa DENSA con 3 neuronas y el entra información de 1 capa\n","oculta2 = tf.keras.layers.Dense(units=3)                   # capa DENSA con 3 neuronas\n","salida = tf.keras.layers.Dense(units=1)                    # capa de salida con 1 neurona\n","#creamos el modelo con las 4 capas (recuerden 1 que la de la parametros no hace falta definirla)\n","modelo = tf.keras.Sequential([oculta1, oculta2, salida])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gHZi7q5_wgJ_"},"source":["# compilamos\n","modelo.compile(\n","    optimizer=tf.keras.optimizers.Adam(0.1),\n","    loss='mean_squared_error'\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"erOnWc5uwnK1"},"source":["#entrenamos\n","print(\"Comenzando entrenamiento...\")\n","historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose=True)\n","print(\"Modelo entrenado!\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zO2WrgjVw4OX"},"source":["###P7.2 resultados del entrenamiento"]},{"cell_type":"code","metadata":{"id":"mklSXyxxw-KN"},"source":["import matplotlib.pyplot as plt\n","plt.xlabel(\"# Epoca\")\n","plt.ylabel(\"Magnitud de pérdida\")\n","plt.plot(historial.history[\"loss\"])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JgIx7x3ow--i"},"source":["import matplotlib.pyplot as plt\n","plt.xlabel(\"# Epoca\")\n","plt.ylabel(\"Magnitud de pérdida\")\n","plt.plot(historial.history[\"accuracy\"])"],"execution_count":null,"outputs":[]}]}